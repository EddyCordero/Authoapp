// <auto-generated />
using System;
using Authoapp.API.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Authoapp.API.Migrations
{
    [DbContext(typeof(AuthoappDbContext))]
    partial class AuthoappDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8");

            modelBuilder.Entity("Authoapp.API.Entities.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("DateFrom")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("DateTo")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.Property<int>("PermissionTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PermissionTypeId");

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2020, 10, 1, 1, 41, 27, 498, DateTimeKind.Utc).AddTicks(7260),
                            DateFrom = new DateTimeOffset(new DateTime(2020, 9, 30, 21, 41, 27, 498, DateTimeKind.Unspecified).AddTicks(9410), new TimeSpan(0, -4, 0, 0, 0)),
                            DateTo = new DateTimeOffset(new DateTime(2020, 10, 15, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, -4, 0, 0, 0)),
                            FirstName = "Juan",
                            LastName = "Perez",
                            PermissionTypeId = 1,
                            UpdatedAt = new DateTime(2020, 10, 1, 1, 41, 27, 498, DateTimeKind.Utc).AddTicks(7260)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2020, 10, 1, 1, 41, 27, 519, DateTimeKind.Utc).AddTicks(7000),
                            DateFrom = new DateTimeOffset(new DateTime(2020, 9, 30, 21, 41, 27, 519, DateTimeKind.Unspecified).AddTicks(7060), new TimeSpan(0, -4, 0, 0, 0)),
                            DateTo = new DateTimeOffset(new DateTime(2020, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, -4, 0, 0, 0)),
                            FirstName = "Maria",
                            LastName = "Perez",
                            PermissionTypeId = 2,
                            UpdatedAt = new DateTime(2020, 10, 1, 1, 41, 27, 519, DateTimeKind.Utc).AddTicks(7000)
                        });
                });

            modelBuilder.Entity("Authoapp.API.Entities.PermissionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(200);

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT")
                        .HasMaxLength(500);

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("PermissionTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2020, 10, 1, 1, 41, 27, 496, DateTimeKind.Utc).AddTicks(3370),
                            Description = "Vacaciones",
                            UpdatedAt = new DateTime(2020, 10, 1, 1, 41, 27, 496, DateTimeKind.Utc).AddTicks(3370)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2020, 10, 1, 1, 41, 27, 496, DateTimeKind.Utc).AddTicks(5000),
                            Description = "Licencia",
                            UpdatedAt = new DateTime(2020, 10, 1, 1, 41, 27, 496, DateTimeKind.Utc).AddTicks(5000)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2020, 10, 1, 1, 41, 27, 496, DateTimeKind.Utc).AddTicks(5030),
                            Description = "Enfermedad",
                            UpdatedAt = new DateTime(2020, 10, 1, 1, 41, 27, 496, DateTimeKind.Utc).AddTicks(5030)
                        });
                });

            modelBuilder.Entity("Authoapp.API.Entities.Permission", b =>
                {
                    b.HasOne("Authoapp.API.Entities.PermissionType", "PermissionType")
                        .WithMany()
                        .HasForeignKey("PermissionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
